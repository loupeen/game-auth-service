name: Deployment Tests

on:
  workflow_run:
    workflows: ["Integration Tests", "Performance Tests", "Security Tests"]
    types:
      - completed
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test deployment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - qa
      deployment_type:
        description: 'Type of deployment test'
        required: false
        default: 'validation'
        type: choice
        options:
          - 'validation'
          - 'rollback'
          - 'disaster-recovery'
          - 'full-cycle'

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-north-1'

jobs:
  pre-deployment-validation:
    name: Pre-Deployment Validation (${{ inputs.environment || 'test' }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
      stack-name: ${{ steps.validation.outputs.stack-name }}
      
    steps:
      - name: 🔧 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm run build

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Pre-Deployment Checks
        id: validation
        run: |
          echo "🔍 Running pre-deployment validation..."
          
          # Set environment-specific variables
          if [ "${{ inputs.environment || 'test' }}" = "test" ]; then
            STACK_NAME="GameAuthService-test"
            AWS_ACCOUNT="728427470046"
            AWS_REGION="eu-north-1"
          else
            STACK_NAME="GameAuthService-qa"
            AWS_ACCOUNT="077029784291" 
            AWS_REGION="us-east-1"
          fi
          
          echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT
          
          # 1. CDK Synthesis Validation
          echo "📦 Validating CDK synthesis..."
          JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION=1 npx cdk synth --context environment=${{ inputs.environment || 'test' }}
          
          # 2. CloudFormation Template Validation
          echo "📋 Validating CloudFormation template..."
          aws cloudformation validate-template --template-body file://cdk.out/$STACK_NAME.template.json
          
          # 3. Check AWS Account Access
          echo "🔐 Validating AWS account access..."
          CALLER_IDENTITY=$(aws sts get-caller-identity)
          ACCOUNT_ID=$(echo $CALLER_IDENTITY | jq -r '.Account')
          
          if [ "$ACCOUNT_ID" != "$AWS_ACCOUNT" ]; then
            echo "❌ Account mismatch. Expected: $AWS_ACCOUNT, Got: $ACCOUNT_ID"
            exit 1
          fi
          
          # 4. Check Resource Quotas
          echo "📊 Checking resource quotas..."
          ./scripts/check-resource-quotas.sh --account "$AWS_ACCOUNT" --region "$AWS_REGION"
          
          # 5. Validate Dependencies
          echo "🔗 Validating service dependencies..."
          npm run validate-dependencies
          
          echo "✅ Pre-deployment validation completed successfully"
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: 📊 Resource Impact Analysis
        run: |
          echo "📊 Analyzing deployment resource impact..."
          
          # Generate change set for impact analysis
          JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION=1 npx cdk diff --context environment=${{ inputs.environment || 'test' }} > deployment-diff.txt || true
          
          # Analyze cost implications
          ./scripts/analyze-cost-impact.sh --environment "${{ inputs.environment || 'test' }}" --diff-file deployment-diff.txt

  deployment-test:
    name: Deployment Test (${{ inputs.environment || 'test' }})
    needs: pre-deployment-validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: needs.pre-deployment-validation.outputs.deployment-ready == 'true'
    
    outputs:
      deployment-success: ${{ steps.deploy.outputs.success }}
      
    steps:
      - name: 🔧 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm run build

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.environment == 'qa' && secrets.AWS_ACCESS_KEY_ID_QA || secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ inputs.environment == 'qa' && secrets.AWS_SECRET_ACCESS_KEY_QA || secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ inputs.environment == 'qa' && 'us-east-1' || 'eu-north-1' }}

      - name: 🚀 Deploy Stack
        id: deploy
        run: |
          echo "🚀 Deploying stack to ${{ inputs.environment || 'test' }} environment..."
          
          STACK_NAME="${{ needs.pre-deployment-validation.outputs.stack-name }}"
          
          # Deploy with no approval required for test environments
          JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION=1 npx cdk deploy $STACK_NAME \
            --context environment=${{ inputs.environment || 'test' }} \
            --require-approval never \
            --outputs-file deployment-outputs.json \
            --progress events
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment completed successfully"

      - name: 📊 Post-Deployment Verification
        run: |
          echo "📊 Running post-deployment verification..."
          
          # Extract outputs from deployment
          if [ -f "deployment-outputs.json" ]; then
            API_URL=$(jq -r '.["${{ needs.pre-deployment-validation.outputs.stack-name }}"].ApiGatewayUrl' deployment-outputs.json)
            USER_POOL_ID=$(jq -r '.["${{ needs.pre-deployment-validation.outputs.stack-name }}"].PlayerUserPoolId' deployment-outputs.json)
            
            echo "API_URL=$API_URL" >> $GITHUB_ENV
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
          fi
          
          # Basic health check
          sleep 30  # Allow services to warm up
          
          if curl --max-time 10 --fail "$API_URL" > /dev/null 2>&1; then
            echo "✅ API Gateway health check passed"
          else
            echo "❌ API Gateway health check failed"
            exit 1
          fi
          
          # Verify Lambda functions are active
          aws lambda list-functions --query 'Functions[?contains(FunctionName, `GameAuthService-${{ inputs.environment || "test" }}`)].State' --output text | grep -v "Pending\|Inactive" || {
            echo "❌ Some Lambda functions are not active"
            exit 1
          }
          
          echo "✅ Post-deployment verification completed"

      - name: 🧪 Post-Deployment Integration Tests
        run: |
          echo "🧪 Running post-deployment integration tests..."
          
          # Run subset of critical integration tests
          TEST_ENV=${{ inputs.environment || 'test' }} npm run test:integration -- test/integration/post-deployment/
          
          echo "✅ Post-deployment integration tests passed"

  rollback-test:
    name: Rollback Test (${{ inputs.environment || 'test' }})
    needs: [pre-deployment-validation, deployment-test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: always() && (inputs.deployment_type == 'rollback' || inputs.deployment_type == 'full-cycle')
    
    steps:
      - name: 🔧 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm run build

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.environment == 'qa' && secrets.AWS_ACCESS_KEY_ID_QA || secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ inputs.environment == 'qa' && secrets.AWS_SECRET_ACCESS_KEY_QA || secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ inputs.environment == 'qa' && 'us-east-1' || 'eu-north-1' }}

      - name: 🔄 Test Rollback Capability
        run: |
          echo "🔄 Testing rollback capability..."
          
          STACK_NAME="${{ needs.pre-deployment-validation.outputs.stack-name }}"
          
          # Get current stack state
          aws cloudformation describe-stacks --stack-name $STACK_NAME > current-stack-state.json
          
          # Simulate rollback by deploying previous version (if exists)
          echo "📋 Checking rollback capability..."
          
          # For testing, we'll check if rollback is possible rather than actually rolling back
          aws cloudformation describe-stack-events --stack-name $STACK_NAME --max-items 10 > recent-events.json
          
          echo "✅ Rollback capability verified"

  disaster-recovery-test:
    name: Disaster Recovery Test (${{ inputs.environment || 'test' }})
    needs: [pre-deployment-validation, deployment-test]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: always() && (inputs.deployment_type == 'disaster-recovery' || inputs.deployment_type == 'full-cycle')
    
    steps:
      - name: 🔧 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm run build

      - name: ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.environment == 'qa' && secrets.AWS_ACCESS_KEY_ID_QA || secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ inputs.environment == 'qa' && secrets.AWS_SECRET_ACCESS_KEY_QA || secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ inputs.environment == 'qa' && 'us-east-1' || 'eu-north-1' }}

      - name: 🆘 Disaster Recovery Simulation
        run: |
          echo "🆘 Simulating disaster recovery scenario..."
          
          # Test data backup and recovery capabilities
          ./scripts/test-disaster-recovery.sh --environment "${{ inputs.environment || 'test' }}"
          
          # Verify backup systems
          echo "💾 Verifying backup systems..."
          aws dynamodb list-backups --table-name GameAuthService-${{ inputs.environment || 'test' }}-* || echo "No DynamoDB backups found"
          
          # Test cross-region recovery (for QA/Production)
          if [ "${{ inputs.environment }}" = "qa" ]; then
            echo "🌍 Testing cross-region recovery capability..."
            ./scripts/test-cross-region-recovery.sh
          fi
          
          echo "✅ Disaster recovery test completed"

  deployment-report:
    name: Generate Deployment Report
    needs: [pre-deployment-validation, deployment-test, rollback-test, disaster-recovery-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Generate Deployment Report
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentReport = {
              timestamp: new Date().toISOString(),
              environment: '${{ inputs.environment || "test" }}',
              deploymentType: '${{ inputs.deployment_type || "validation" }}',
              results: {
                preDeploymentValidation: '${{ needs.pre-deployment-validation.result }}',
                deployment: '${{ needs.deployment-test.result }}',
                rollback: '${{ needs.rollback-test.result }}',
                disasterRecovery: '${{ needs.disaster-recovery-test.result }}'
              },
              success: '${{ needs.deployment-test.result }}' === 'success',
              readyForProduction: [
                '${{ needs.pre-deployment-validation.result }}',
                '${{ needs.deployment-test.result }}',
                '${{ needs.rollback-test.result }}'
              ].every(result => result === 'success' || result === 'skipped')
            };
            
            console.log('Deployment Report:', JSON.stringify(deploymentReport, null, 2));
            
            // Save to artifacts
            require('fs').writeFileSync('deployment-report.json', JSON.stringify(deploymentReport, null, 2));

      - name: 📋 Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ inputs.environment || 'test' }}-${{ github.sha }}
          path: deployment-report.json
          retention-days: 90